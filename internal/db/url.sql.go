// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: url.sql

package db

import (
	"context"
	"time"
)

const uRLCreate = `-- name: URLCreate :one
INSERT INTO "url" ("id","original", "shortened", "clicks", "created")
VALUES (?, ? , ? ,? , ?) RETURNING id, original, shortened, clicks, created
`

type URLCreateParams struct {
	ID        string
	Original  string
	Shortened string
	Clicks    int64
	Created   time.Time
}

func (q *Queries) URLCreate(ctx context.Context, arg URLCreateParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, uRLCreate,
		arg.ID,
		arg.Original,
		arg.Shortened,
		arg.Clicks,
		arg.Created,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Original,
		&i.Shortened,
		&i.Clicks,
		&i.Created,
	)
	return i, err
}

const uRLDeleteUrlByID = `-- name: URLDeleteUrlByID :exec
DELETE FROM "url" WHERE "id" = ?
`

func (q *Queries) URLDeleteUrlByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, uRLDeleteUrlByID, id)
	return err
}

const uRLDeleteUrlByOriginal = `-- name: URLDeleteUrlByOriginal :exec
DELETE FROM "url" WHERE "original" = ?
`

func (q *Queries) URLDeleteUrlByOriginal(ctx context.Context, original string) error {
	_, err := q.db.ExecContext(ctx, uRLDeleteUrlByOriginal, original)
	return err
}

const uRLDeleteUrlByShortened = `-- name: URLDeleteUrlByShortened :exec
DELETE FROM "url" WHERE "shortened" = ?
`

func (q *Queries) URLDeleteUrlByShortened(ctx context.Context, shortened string) error {
	_, err := q.db.ExecContext(ctx, uRLDeleteUrlByShortened, shortened)
	return err
}

const uRLGetAll = `-- name: URLGetAll :many
SELECT id, original, shortened, clicks, created FROM "url" LIMIT ? OFFSET ?
`

type URLGetAllParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) URLGetAll(ctx context.Context, arg URLGetAllParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, uRLGetAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Original,
			&i.Shortened,
			&i.Clicks,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uRLGetByID = `-- name: URLGetByID :one
SELECT id, original, shortened, clicks, created FROM "url" WHERE "id" = ?
`

func (q *Queries) URLGetByID(ctx context.Context, id string) (Url, error) {
	row := q.db.QueryRowContext(ctx, uRLGetByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Original,
		&i.Shortened,
		&i.Clicks,
		&i.Created,
	)
	return i, err
}

const uRLGetByOriginal = `-- name: URLGetByOriginal :one
SELECT id, original, shortened, clicks, created FROM "url" WHERE "original" = ?
`

func (q *Queries) URLGetByOriginal(ctx context.Context, original string) (Url, error) {
	row := q.db.QueryRowContext(ctx, uRLGetByOriginal, original)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Original,
		&i.Shortened,
		&i.Clicks,
		&i.Created,
	)
	return i, err
}

const uRLGetShortenCode = `-- name: URLGetShortenCode :one
SELECT id, original, shortened, clicks, created FROM "url" WHERE "shortened" = ?
`

func (q *Queries) URLGetShortenCode(ctx context.Context, shortened string) (Url, error) {
	row := q.db.QueryRowContext(ctx, uRLGetShortenCode, shortened)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Original,
		&i.Shortened,
		&i.Clicks,
		&i.Created,
	)
	return i, err
}

const uRLUpdateClicks = `-- name: URLUpdateClicks :exec
UPDATE url SET "clicks" = "clicks" + 1 WHERE "id" = ?
`

func (q *Queries) URLUpdateClicks(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, uRLUpdateClicks, id)
	return err
}
